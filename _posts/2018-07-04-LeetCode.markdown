---
layout:     post
title:      "LeetCode"
subtitle:   
date:       2018-07-4
author:     "Ljan"
header-img: "img/post-bg-re-vs-ng2.jpg"
tags:
    - LeetCode
---
### 617. 合并二叉树
给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。
示例 1:
```
输入: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
输出: 
合并后的树:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
```
注意: 合并必须从两个树的根节点开始。
```
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null) return null;
        if (t1 == null && t2 != null) {
            TreeNode treeNode = new TreeNode(t2.val);
            treeNode.left = mergeTrees(null,t2.left);
            treeNode.right = mergeTrees(null, t2.right);
            return treeNode;           
        }
        if (t1 != null && t2 == null) {
            TreeNode treeNode = new TreeNode(t1.val);
            treeNode.left = mergeTrees(t1.left,null);
            treeNode.right = mergeTrees(t1.right,null);
            return treeNode;      
        }
        
        TreeNode treeNode = new TreeNode( t1.val+t2.val);
        treeNode.left = mergeTrees(t1.left,t2.left);
        treeNode.right = mergeTrees(t1.right, t2.right);
        
        return treeNode;
        
    }
}
```
### *654. 最大二叉树 
给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：

二叉树的根是数组中的最大元素。
左子树是通过数组中最大值左边部分构造出的最大二叉树。
右子树是通过数组中最大值右边部分构造出的最大二叉树。
通过给定的数组构建最大二叉树，并且输出这个树的根节点。

Example 1:
```
输入: [3,2,1,6,0,5]
输入: 返回下面这棵树的根节点：

      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1
```
注意:给定的数组的大小在 [1, 1000] 之间。

**解析：二叉树的题目基本通过迭代法都能求解**
```
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if (nums == null) return null;
        int index = getMaxIndex(nums);
        int maxValue = nums[index];

        TreeNode root = new TreeNode(maxValue);

        if (index != nums.length-1){
            int[] rightNums = getRightNums(nums, index);
            root.right = constructMaximumBinaryTree(rightNums);
        }else{
            root.right = null;
        }

        if (index != 0){
            int[] leftNums = getLeftNums(nums, index);
            root.left = constructMaximumBinaryTree(leftNums);
        }else{
            root.left = null;
        }
        return root;
    }

    /*获取数组中的最大值*/
    private int getMaxIndex(int[] nums){
        int maxValue = 0, index = 0;
        for (int k = 0; k<nums.length; k++){
            if (nums[k] > maxValue) {
                maxValue = nums[k];
                index = k;
            }
        }
        return index;
    }

    /*获取左边数组*/
    private int[] getLeftNums(int[] nums, int index){
        int newNums[] = new int[index];
        for (int i = 0; i<index; i++){
            newNums[i] = nums[i];
        }
        return newNums;
    }

    /*获取右边数组*/
    private int[] getRightNums(int[] nums, int index){
        int newNums[] = new int[nums.length-index-1];
        for (int i = 0; i<nums.length-index-1.;i++){
            newNums[i]=nums[i+index+1];
        }
        return newNums;
    }

}
```

### 292. Nim游戏
你和你的朋友，两个人一起玩 Nim游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。
你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。
示例:
```
输入: 4
输出: false 
解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
```
**解析：首先面对4或4的倍数的人则输掉比赛,所以尽量使得自己拿一次后对手面对4或4的倍数**
	
```	 
class Solution {
	public boolean canWinNim(int n) {
		return (n-1)%4==0 ? true :
			(n-2)%4==0 ? true :
			(n-3)%4==0 ? true : false;        
	}    
}
```

### 226. 翻转二叉树
翻转一棵二叉树。

示例：
```
输入：

     4
   /   \
  2     7
 / \   / \
1   3 6   9
输出：

     4
   /   \
  7     2
 / \   / \
9   6 3   1
```

**解析：再一次强调 遍历二叉树时 采用迭代的思路**

```
    /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root ==null) return null;
        TreeNode temp = root.left;
        root.left = invertTree(root.right);
        root.right = invertTree(temp);    
        return root;
    }
}
```

### 728. 自除数
自除数 是指可以被它包含的每一位数除尽的数。

例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。

还有，自除数不允许包含 0 。

给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。

示例 1：
```
输入： 
上边界left = 1, 下边界right = 22
输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
```
注意：每个输入参数的边界满足 1 <= left <= right <= 10000。

**解析：如何取得一个整数的个、十、百、千位？不断的除以10取余数，即可从个位开始获得相应值。注意：自除数不包含0**

```
class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> A = new ArrayList<>();
        for (int i = left; i<=right;i++){
            if(fun(i)) 
                A.add(i);
        }
        return A;
        
    }
    
    public boolean fun(int i){
        int num = i;
        while(num != 0){
            if((num%10 != 0) && (i%(num%10)==0)){
                num = num/10;
            }else{
                return false;
            }
        }
        return true;
    }
}
```